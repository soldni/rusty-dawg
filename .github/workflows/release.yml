name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    tags:
    - 'v*.*.*'

jobs:
  python_build_linux:
    name: Python bindings (linux, ${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, aarch64, armv7]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust and sccache
        uses: ./.github/actions/rust-sccache-setup
        with:
          rust-version: stable
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install 32bit version of libc
        if: ${{ matrix.target == 'x86' || contains(matrix.target, 'i686') }}
        run: |
          sudo apt-get update
          sudo apt-get install --yes --upgrade libc6-dev-i386

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes --upgrade build-essential cmake protobuf-compiler libssl-dev glibc-source musl-tools pkg-config libudev-dev

      - name: Build wheels
        run: |
          ./scripts/rebuild_bindings.sh --no-install

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Save Rust and sccache cache
        uses: ./.github/actions/rust-sccache-cache

  python_build_macos:
    name: Python bindings (macos, ${{ matrix.target }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust and sccache
        uses: ./.github/actions/rust-sccache-setup
        with:
          rust-version: stable
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build wheels
        run: |
          ./scripts/rebuild_bindings.sh --no-install

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Save Rust and sccache cache
        uses: ./.github/actions/rust-sccache-cache

  python_build_sdist:
    name: Python bindings (sdist)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust and sccache
        uses: ./.github/actions/rust-sccache-setup
        with:
          rust-version: stable
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build sdist
        run: |
          ./scripts/rebuild_bindings.sh --sdist --no-install

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Save Rust and sccache cache
        uses: ./.github/actions/rust-sccache-cache

  python_build_windows:
    name: Python bindings (windows, ${{ matrix.target }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust and sccache
        uses: ./.github/actions/rust-sccache-setup
        with:
          rust-version: stable
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # slightly modified version of rebuild_bindings.sh so it works on windows
      - name: Build wheels
        run: |
          cd bindings/python
          maturin build --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Save Rust and sccache cache
        uses: ./.github/actions/rust-sccache-cache


  # publish_crate:
  #   name: Crates.io release
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/')
  #   needs: [rust_checks]
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup Rust and sccache
  #       uses: ./.github/actions/rust-sccache-setup
  #       with:
  #         rust-version: stable
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Log in to crates.io
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: login
  #         args: ${{ secrets.CRATES_TOKEN }}

  #     - name: Publish to crates.io
  #       run: |
  #         cargo publish

  #     - name: Save Rust and sccache cache
  #       uses: ./.github/actions/rust-sccache-cache

  publish_python_bindings:
    name: PyPI release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [python_build_linux, python_build_macos]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
          working-directory: bindings/python
