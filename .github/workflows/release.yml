name: Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    tags:
    - 'v*.*.*'

jobs:
  python_build_linux:
    name: Python bindings (linux, ${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, i686-unknown-linux-gnu]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust and sccache
        uses: ./.github/actions/rust-sccache-setup
        with:
          rust-version: stable
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install 32bit version of libc
        if: ${{ matrix.target == 'i686-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install --yes --upgrade libc6-dev-i386

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes --upgrade build-essential cmake protobuf-compiler libssl-dev glibc-source musl-tools pkg-config libudev-dev

      - name: Add missing target
        run: |
          rustup target add ${{ matrix.target }}

      - name: Build wheels
        run: |
          ./scripts/rebuild_bindings.sh --no-install --target ${{ matrix.target }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheels-${{ matrix.target }}
          path: dist/*

      - name: Save Rust and sccache cache
        uses: ./.github/actions/rust-sccache-cache

  python_build_macos:
    name: Python bindings (macos, ${{ matrix.target }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust and sccache
        uses: ./.github/actions/rust-sccache-setup
        with:
          rust-version: stable
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add missing target
        run: |
          rustup target add ${{ matrix.target }}

      - name: Build wheels
        run: |
          ./scripts/rebuild_bindings.sh --no-install --target ${{ matrix.target }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: macos-wheels-${{ matrix.target }}
          path: dist/*

      - name: Save Rust and sccache cache
        uses: ./.github/actions/rust-sccache-cache


  # python_build_windows:
  #   name: Python bindings (windows, ${{ matrix.target }})
  #   runs-on: windows-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target: [x64]
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup Rust and sccache
  #       uses: ./.github/actions/rust-sccache-setup
  #       with:
  #         rust-version: stable
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Add missing target
  #       run: |
  #         rustup target add ${{ matrix.target }}

  #     - name: Build wheels
  #       shell: bash
  #       run: |
  #         choco install strawberryperl openssl.light
  #         ./scripts/rebuild_bindings.sh --no-install

  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: windows-wheels
  #         path: dist/*

  #     - name: Save Rust and sccache cache
  #       uses: ./.github/actions/rust-sccache-cache

  python_build_sdist:
    name: Python bindings (sdist)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust and sccache
        uses: ./.github/actions/rust-sccache-setup
        with:
          rust-version: stable
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build sdist
        run: |
          ./scripts/rebuild_bindings.sh --sdist --no-install

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*

      - name: Save Rust and sccache cache
        uses: ./.github/actions/rust-sccache-cache

  publish_crate:
    name: Crates.io release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust and sccache
        uses: ./.github/actions/rust-sccache-setup
        with:
          rust-version: stable
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_TOKEN }}

      - name: Publish to crates.io
        run: |
          cargo publish

      - name: Save Rust and sccache cache
        uses: ./.github/actions/rust-sccache-cache

  publish_python_bindings:
    name: PyPI release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [python_build_linux, python_build_macos, python_build_sdist]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Prepare distribution files
        run: |
          mkdir combined-dist
          cp dist/*/* combined-dist/
      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@v1.10.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: combined-dist/
          skip-existing: true
